testclass Microwave_UnitSimplifiedTest for statechart Microwave_Unit {
	@Test
	operation test02 () {
	    triggerWithoutEvent
	    assert !is_active
	}

	@Test
	operation test03 () {
	    enter
	    raise device.on
	    raise Door.open
	    raise Door.close
	    assert is_active
	}

	@Test
	operation test04 () {
	    enter
	    raise device.on
	    raise Door.open
	    raise device.addTimer
	    assert is_active
	}

	@Test
	operation test05 () {
	    enter
	    raise device.on
	    raise device.start
	    proceed 1s
	    assert is_active
	}

	@Test
	operation test06 () {
	    enter
	    raise device.on
	    raise device.resetTimer
	}

	@Test
	operation test07 () {
	    enter
	    raise device.on
	    raise Door.open
	    raise device.start
	}

	@Test
	operation test08 () {
	    enter
	    raise device.on
	    raise device.addTimer
	    raise device.start
	    raise device.addTimer
	    raise device.pause
	    assert is_active
	}

	@Test
	operation test09 () {
	    enter
	    raise device.on
	    enter
	    raise device.off
	    assert is_active
	}

	@Test
	operation test10 () {
	    enter
	    raise device.on
	    raise device.start
	    raise device.off
	}

	@Test
	operation test11 () {
	    enter
	    raise device.on
	    raise Door.open
	    exit
	    assert is_active
	}

	@Test
	operation test12 () {
	    enter
	    raise device.on
	    raise device.addTimer
	    raise device.start
	    raise device.addTimer
	    exit
	    assert is_active
	}

	@Test
	operation test13 () {
	    enter
	    raise device.on
	    raise device.start
	    exit
	    assert is_active
	}

	@Test
	operation test14 () {
	    enter
	    assert is_active
	    exit
	    assert !is_active
	}

	@Test
	operation test15 () {
	    enter
	    raise device.on
	    raise Door.open
	    assert active (Microwave_Unit._Microwave_Unit_._on_.doorStatus.DoorOpened)
	}

	@Test
	operation test16 () {
	    enter
	    raise device.on
	    assert is_active
	    assert active (Microwave_Unit._Microwave_Unit_._on_.doorStatus.DoorClosed)
	}

	@Test
	operation test17 () {
	    enter
	    raise device.on
	    raise device.start
	    assert is_active
	    assert active (Microwave_Unit._Microwave_Unit_._on_._Microwave_isWorking_.startTimer._Starting_Timer_.pause)
	}

	@Test
	operation test18 () {
	    enter
	    raise device.on
	    raise device.start
	    assert is_active
	    assert active (Microwave_Unit._Microwave_Unit_._on_._Microwave_isWorking_.startTimer)
	}

	@Test
	operation test19 () {
	    enter
	    assert is_active
	    assert !active (Microwave_Unit._Microwave_Unit_._on_._Microwave_isWorking_.startTimer)
	}

	@Test
	operation test20 () {
	    enter
	    raise device.on
	    assert is_active
	    assert active (Microwave_Unit._Microwave_Unit_._on_._Microwave_isWorking_.idle_standby)
	}

	@Test
	operation test21 () {
	    enter
	    raise device.on
	    assert is_active
	    assert active (Microwave_Unit._Microwave_Unit_._on_)
	}

	@Test
	operation test22 () {
	    enter
	    assert is_active
	    assert !active (Microwave_Unit._Microwave_Unit_._on_)
	}

	@Test
	operation test23 () {
	    enter
	    assert is_active
	    assert active (Microwave_Unit._Microwave_Unit_._off_)
	}

	@Test
	operation test25 () {
	    assert !active (Microwave_Unit._Microwave_Unit_._on_._Microwave_isWorking_.startTimer)
	}

	@Test
	operation test26 () {
	    assert !active (Microwave_Unit._Microwave_Unit_._on_)
	}

	@Test
	operation test27 () {
	    assert !active (Microwave_Unit._Microwave_Unit_._on_.doorStatus.DoorOpened)
	}

	@Test
	operation test28 () {
	    assert !active (Microwave_Unit._Microwave_Unit_._on_.doorStatus.DoorClosed)
	}

	@Test
	operation test29 () {
	    assert !active (Microwave_Unit._Microwave_Unit_._on_._Microwave_isWorking_.startTimer._Starting_Timer_.start)
	}

	@Test
	operation test30 () {
	    assert !active (Microwave_Unit._Microwave_Unit_._on_._Microwave_isWorking_.startTimer._Starting_Timer_.pause)
	}

	@Test
	operation test31 () {
	    assert !active (Microwave_Unit._Microwave_Unit_._on_._Microwave_isWorking_.idle_standby)
	}

	@Test
	operation test32 () {
	    assert !active (Microwave_Unit._Microwave_Unit_._on_._Microwave_isWorking_.addTimer)
	}

	@Test
	operation test33 () {
	    assert !active (Microwave_Unit._Microwave_Unit_._off_)
	}

	@Test
	operation test34 () {
	    enter
	    raise device.on
	    exit
	    assert is_active
	}

	@Test
	operation test35 () {
	    assert !is_active
	}

	@Test
	operation test36 () {
	    enter
	    assert is_active
	}

	@Test
	operation test37 () {
	    exit
	    assert !is_active
	}

	@Test
	operation test40 () {
	    assert !is_final
	    assert !is_active
	}

	@Test
	operation test41 () {
	    enter
	    raise device.on
	    raise device.addTimer
	    raise device.start
	    raise device.addTimer
	    raise device.off
	}

	@Test
	operation test42 () {
	    enter
	    raise device.on
	    raise Door.open
	    raise device.off
	}

	@Test
	operation test43 () {
	    assert !is_active
	    enter
	    raise device.on
	    raise device.addTimer
	    raise device.start
	    raise device.addTimer
	    proceed 1s
	    assert is_active
	}

}