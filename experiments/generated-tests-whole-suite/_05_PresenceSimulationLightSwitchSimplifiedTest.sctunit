testclass _05_PresenceSimulationLightSwitchSimplifiedTest for statechart _05_PresenceSimulationLightSwitch {
	@Test
	operation test02 () {
	    triggerWithoutEvent
	    assert !is_final
	}

	@Test
	operation test04 () {
	    enter
	    raise hmi.toggleMode
	    raise hmi.toggleMode
	    raise hmi.switch
	    raise hmi.switch
	    raise hmi.switch
	    raise hmi.changeBrightness
	    raise hmi.changeBrightness
	    raise hmi.changeBrightness
	    raise hmi.changeBrightness
	    raise hmi.changeBrightness
	    raise hmi.changeBrightness
	    raise hmi.changeBrightness
	    raise hmi.changeBrightness
	    raise hmi.changeBrightness
	    assert is_active
	}

	@Test
	operation test05 () {
	    enter
	    raise hmi.toggleMode
	    raise hmi.toggleMode
	    raise hmi.toggleMode
	    raise hmi.changeBrightness
	    assert is_active
	}

	@Test
	operation test06 () {
	    enter
	    raise hmi.toggleMode
	    raise hmi.toggleMode
	    raise hmi.switch
	    raise hmi.switch
	    raise hmi.switch
	    raise hmi.toggleMode
	    assert is_active
	}

	@Test
	operation test07 () {
	    enter
	    assert is_active
	    exit
	    assert !is_active
	}

	@Test
	operation test08 () {
	    enter
	    raise hmi.toggleMode
	    raise hmi.toggleMode
	    raise hmi.toggleMode
	    exit
	    assert !is_active
	}

	@Test
	operation test09 () {
	    enter
	    raise hmi.toggleMode
	    raise hmi.toggleMode
	    raise hmi.switch
	    raise hmi.switch
	    raise hmi.switch
	    assert active (_05_PresenceSimulationLightSwitch.main.Manual.mode.On)
	}

	@Test
	operation test10 () {
	    enter
	    assert is_active
	    assert active (_05_PresenceSimulationLightSwitch.main.Manual.mode.Off)
	}

	@Test
	operation test11 () {
	    enter
	    assert is_active
	    assert active (_05_PresenceSimulationLightSwitch.main.Manual)
	}

	@Test
	operation test12 () {
	    enter
	    raise hmi.toggleMode
	    assert is_active
	    assert !active (_05_PresenceSimulationLightSwitch.main.Manual)
	}

	@Test
	operation test13 () {
	    enter
	    raise hmi.toggleMode
	    assert is_active
	    assert !active (_05_PresenceSimulationLightSwitch.main.Presence_Simulation.mode.Active)
	}

	@Test
	operation test14 () {
	    enter
	    raise hmi.toggleMode
	    raise hmi.toggleMode
	    raise hmi.toggleMode
	    assert active (_05_PresenceSimulationLightSwitch.main.Presence_Simulation.mode.Idle)
	}

	@Test
	operation test15 () {
	    enter
	    raise hmi.toggleMode
	    raise hmi.toggleMode
	    raise hmi.toggleMode
	    assert active (_05_PresenceSimulationLightSwitch.main.Presence_Simulation)
	}

	@Test
	operation test17 () {
	    assert !active (_05_PresenceSimulationLightSwitch.main.Manual)
	}

	@Test
	operation test18 () {
	    assert !active (_05_PresenceSimulationLightSwitch.main.Presence_Simulation.mode.Active)
	}

	@Test
	operation test19 () {
	    assert !active (_05_PresenceSimulationLightSwitch.main.Presence_Simulation)
	}

	@Test
	operation test20 () {
	    assert !active (_05_PresenceSimulationLightSwitch.main.Presence_Simulation.mode.Active.presence.Absent)
	}

	@Test
	operation test21 () {
	    assert !active (_05_PresenceSimulationLightSwitch.main.Presence_Simulation.mode.Active.presence.Present)
	}

	@Test
	operation test22 () {
	    assert !active (_05_PresenceSimulationLightSwitch.main.Manual.mode.On)
	}

	@Test
	operation test23 () {
	    assert !active (_05_PresenceSimulationLightSwitch.main.Presence_Simulation.mode.Active.schedule.Waiting)
	}

	@Test
	operation test24 () {
	    assert !active (_05_PresenceSimulationLightSwitch.main.Manual.mode.Off)
	}

	@Test
	operation test25 () {
	    assert !active (_05_PresenceSimulationLightSwitch.main.Presence_Simulation.mode.Idle)
	}

	@Test
	operation test27 () {
	    assert !is_active
	}

	@Test
	operation test28 () {
	    enter
	    assert is_active
	}

	@Test
	operation test29 () {
	    exit
	    assert !is_active
	}

	@Test
	operation test33 () {
	    assert !is_final
	    assert !is_active
	}

	@Test
	operation test35 () {
	    enter
	    raise hmi.toggleMode
	    raise hmi.toggleMode
	    raise hmi.switch
	    raise hmi.switch
	    raise hmi.switch
	    raise hmi.switch
	    raise hmi.switch
	    exit
	    assert !is_active
	}

}