testclass SignalSimplifiedTest for statechart mrw.^statechart.Signal {
	@Test
	operation test00 () {
	    triggerWithoutEvent
	    assert !is_active
	}

	@Test
	operation test01 () {
	    mock hasSignal returns (true)
	    enter
	    raise turn: 0
	    raise fail
	    raise ok
	    assert is_active
	}

	@Test
	operation test02 () {
	    mock hasSignal returns (true)
	    enter
	    raise turn: 0
	    raise turn: 0
	    assert is_active
	}

	@Test
	operation test04 () {
	    mock hasSignal returns (true)
	    enter
	    raise turn: 0
	    raise ok
	    assert is_active
	}

	@Test
	operation test05 () {
	    enter
	    raise ok
	    assert is_active
	}

	@Test
	operation test06 () {
	    mock hasSignal returns (true)
	    enter
	    raise turn: 0
	    raise fail
	    exit
	    assert !is_active
	}

	@Test
	operation test07 () {
	    mock hasSignal returns (true)
	    enter
	    raise turn: 0
	    assert is_active
	    exit
	    assert !is_active
	}

	@Test
	operation test08 () {
	    mock hasSignal returns (true)
	    enter
	    raise turn: 0
	    raise queued
	    assert is_active
	    exit
	    assert !is_active
	}

	@Test
	operation test09 () {
	    enter
	    assert is_active
	    exit
	    assert !is_active
	}

	@Test
	operation test10 () {
	    mock hasSignal returns (false)
	    enter
	    raise turn: 0
	    raise fail
	}

	@Test
	operation test11 () {
	    mock hasSignal returns (true)
	    enter
	    raise turn: 0
	    assert is_active
	    assert active (mrw.^statechart.Signal.main_region.Turning.Turn_processing.Send)
	}

	@Test
	operation test12 () {
	    mock hasSignal returns (true)
	    enter
	    raise turn: 0
	    assert is_active
	    assert active (mrw.^statechart.Signal.main_region.Turning)
	}

	@Test
	operation test13 () {
	    enter
	    assert is_active
	    assert !active (mrw.^statechart.Signal.main_region.Turning)
	}

	@Test
	operation test14 () {
	    enter
	    assert is_active
	    assert active (mrw.^statechart.Signal.main_region.Idle)
	}

	@Test
	operation test16 () {
	    assert !active (mrw.^statechart.Signal.main_region.Fail)
	}

	@Test
	operation test17 () {
	    assert !active (mrw.^statechart.Signal.main_region.Turning.Turn_processing.Send)
	}

	@Test
	operation test18 () {
	    assert !active (mrw.^statechart.Signal.main_region.Turning.Turn_processing.Pending)
	}

	@Test
	operation test19 () {
	    assert !active (mrw.^statechart.Signal.main_region.Turning)
	}

	@Test
	operation test20 () {
	    assert !active (mrw.^statechart.Signal.main_region.Idle)
	}

	@Test
	operation test22 () {
	    enter
	    assert is_active
	}

	@Test
	operation test23 () {
	    assert !is_active
	}

	@Test
	operation test24 () {
	    exit
	    assert !is_final
	}

	@Test
	operation test27 () {
	    mock hasSignal returns (true)
	    assert !is_active
	    enter
	    raise turn: 0
	    raise fail
	    raise clear
	    assert is_active
	}

	@Test
	operation test28 () {
	    assert !is_final
	    assert !is_active
	}

	@Test
	operation test30 () {
	    mock hasSignal returns (false)
	    assert !is_active
	    enter
	    raise turn: 0
	    assert is_active
	}

	@Test
	operation test31 () {
	    mock hasSignal returns (true)
	    assert !is_active
	    enter
	    raise turn: 0
	    raise queued
	    raise fail
	    assert is_active
	}

}