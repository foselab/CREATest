testclass MqttClientStatechartSimplifiedTest for statechart MqttClientStatechart {
	@Test
	operation test02 () {
	    enter
	    proceed 1 cycle
	    assert is_active
	}

	@Test
	operation test03 () {
	    enter
	    assert is_active
	    exit
	    assert !is_active
	}

	@Test
	operation test04 () {
	    enter
	    assert is_active
	}

	@Test
	operation test07 () {
	    enter
	    assert is_active
	    assert active (MqttClientStatechart.main_region.Undefined.r1.Entry)
	}

	@Test
	operation test08 () {
	    enter
	    assert is_active
	    assert active (MqttClientStatechart.main_region.Undefined)
	}

	@Test
	operation test10 () {
	    assert !active (MqttClientStatechart.main_region.Offline)
	}

	@Test
	operation test11 () {
	    assert !active (MqttClientStatechart.main_region.Online.r1.PublishMessages)
	}

	@Test
	operation test12 () {
	    assert !active (MqttClientStatechart.main_region.Online)
	}

	@Test
	operation test13 () {
	    assert !is_active
	    assert !active (MqttClientStatechart.main_region.Undefined)
	}

	@Test
	operation test14 () {
	    assert !is_active
	}

	@Test
	operation test16 () {
	    assert !active (MqttClientStatechart.main_region.Offline.r1.ConfigureMqtt)
	}

	@Test
	operation test19 () {
	    assert !active (MqttClientStatechart.main_region.Offline.r1.SetTopic)
	}

	@Test
	operation test20 () {
	    assert !active (MqttClientStatechart.main_region.Online.r1.ReceiveMessages)
	}

	@Test
	operation test25 () {
	    assert !is_active
	    assert !active (MqttClientStatechart.main_region.Undefined.r1.Start)
	}

	@Test
	operation test26 () {
	    assert !active (MqttClientStatechart.main_region.Undefined.r1.ResetSystem)
	    assert !is_active
	}

	@Test
	operation test27 () {
	    assert !is_active
	    assert !active (MqttClientStatechart.main_region.Undefined.r1.RestartModule)
	}

	@Test
	operation test29 () {
	    assert !active (MqttClientStatechart.main_region.Undefined.r1.ResetModule)
	}

	@Test
	operation test32 () {
	    proceed 1 cycle
	    assert !is_final
	}

	@Test
	operation test34 () {
	    exit
	    assert !is_active
	}

	@Test
	operation test37 () {
	    raise WizFi360.ready
	    assert !is_active
	}

	@Test
	operation test38 () {
	    raise WizFi360.fail
	    assert !is_active
	}

	@Test
	operation test39 () {
	    raise WizFi360.error
	    assert !is_active
	}

	@Test
	operation test40 () {
	    assert !is_active
	    assert !is_final
	}

	@Test
	operation test41 () {
	    raise WizFi360.ok
	    assert !is_active
	}

	@Test
	operation test43 () {
	    enter
	    proceed 1s
	    proceed 1 cycle
	    assert !is_final
	}

	@Test
	operation test44 () {
	    assert !is_active
	    enter
	    assert is_active
	}

}