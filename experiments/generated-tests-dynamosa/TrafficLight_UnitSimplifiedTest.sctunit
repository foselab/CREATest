testclass TrafficLight_UnitSimplifiedTest for statechart TrafficLight_Unit {
	@Test
	operation test00 () {
	    enter
	    raise on
	    proceed 1s
	    assert is_active
	}

	@Test
	operation test01 () {
	    enter
	    raise on
	    triggerWithoutEvent
	    assert !is_final
	}

	@Test
	operation test02 () {
	    enter
	    raise on
	    enter
	    raise off
	    assert is_active
	}

	@Test
	operation test03 () {
	    enter
	    raise on
	    exit
	    exit
	    exit
	    assert is_active
	}

	@Test
	operation test04 () {
	    enter
	    assert is_active
	    exit
	    assert !is_active
	}

	@Test
	operation test05 () {
	    enter
	    raise on
	    assert is_active
	    assert active (TrafficLight_Unit._TrafficLight_Unit_.On.Timer._timer_running_._Timer_Countdown_._green_period_)
	}

	@Test
	operation test06 () {
	    enter
	    raise on
	    assert is_active
	    assert active (TrafficLight_Unit._TrafficLight_Unit_.On.Timer._timer_running_)
	}

	@Test
	operation test07 () {
	    enter
	    raise on
	    exit
	    exit
	    assert is_active
	    assert !active (TrafficLight_Unit._TrafficLight_Unit_.On.Timer._timer_running_)
	}

	@Test
	operation test08 () {
	    enter
	    raise on
	    assert is_active
	    assert active (TrafficLight_Unit._TrafficLight_Unit_.On.PedestrianLight_Color.StopHand)
	}

	@Test
	operation test09 () {
	    assert !active (TrafficLight_Unit._TrafficLight_Unit_.On.TrafficLight_Color.Green)
	}

	@Test
	operation test10 () {
	    enter
	    raise on
	    assert active (TrafficLight_Unit._TrafficLight_Unit_.On)
	}

	@Test
	operation test11 () {
	    enter
	    assert is_active
	    assert !active (TrafficLight_Unit._TrafficLight_Unit_.On)
	}

	@Test
	operation test12 () {
	    enter
	    assert is_active
	    assert active (TrafficLight_Unit._TrafficLight_Unit_.Off)
	}

	@Test
	operation test14 () {
	    assert !active (TrafficLight_Unit._TrafficLight_Unit_.On.Timer._timer_running_)
	}

	@Test
	operation test15 () {
	    assert !is_active
	    assert !active (TrafficLight_Unit._TrafficLight_Unit_.On)
	}

	@Test
	operation test16 () {
	    assert !is_active
	}

	@Test
	operation test21 () {
	    assert !active (TrafficLight_Unit._TrafficLight_Unit_.On.PedestrianLight_Color.BlinkingWalkingMan)
	    assert !is_active
	}

	@Test
	operation test22 () {
	    assert !active (TrafficLight_Unit._TrafficLight_Unit_.On.PedestrianLight_Color.StopHand)
	    assert !is_active
	}

	@Test
	operation test23 () {
	    assert !is_active
	    assert !active (TrafficLight_Unit._TrafficLight_Unit_.On.TrafficLight_Color.Yellow)
	}

	@Test
	operation test24 () {
	    assert !active (TrafficLight_Unit._TrafficLight_Unit_.On.TrafficLight_Color.Red)
	    assert !is_active
	}

	@Test
	operation test25 () {
	    assert !active (TrafficLight_Unit._TrafficLight_Unit_.Off)
	    assert !is_active
	}

	@Test
	operation test26 () {
	    raise on
	    assert !is_final
	}

	@Test
	operation test27 () {
	    assert !is_active
	    enter
	    raise on
	    exit
	    assert is_active
	}

	@Test
	operation test29 () {
	    assert !is_active
	    enter
	    assert is_active
	}

	@Test
	operation test32 () {
	    assert !is_final
	    assert !is_active
	}

	@Test
	operation test35 () {
	    enter
	    raise on
	    raise off
	    assert is_active
	}

}